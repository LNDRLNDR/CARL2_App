const WebSocket = require('ws');const fs = require('fs');// Load configlet config;try {  config = JSON.parse(fs.readFileSync('./config.json', 'utf-8'));} catch (err) {  console.error('[x] Failed to read config.json');  process.exit(1);}const REMOTE_IP = config.remote_ip;const REMOTE_PORT = config.remote_port;const LOCAL_PORT = config.local_port;const DEBUG = config.debug === true;const remoteUrl = `ws://${REMOTE_IP}:${REMOTE_PORT}`;console.log(`[°] Connecting to remote WebSocket at ${remoteUrl}`);let remoteSocket;const localClients = new Set();function connectToRemote() {  remoteSocket = new WebSocket(remoteUrl);  remoteSocket.on('open', () => {    console.log('[v] Connected to remote WebSocket');  });  remoteSocket.on('message', (msg) => {    if (DEBUG) {      console.log(`[REMOTE → LOCAL]`);    }    for (const client of localClients) {      if (client.readyState === WebSocket.OPEN) {        client.send(msg);      }    }  });  remoteSocket.on('close', () => {    console.log('[!] Remote WebSocket closed. Reconnecting in 3s...');    setTimeout(connectToRemote, 3000);  });  remoteSocket.on('error', (err) => {    console.error('[x] Remote WS error:', err.message);  });}connectToRemote();// Local WebSocket serverconst localWss = new WebSocket.Server({ port: LOCAL_PORT, host: '127.0.0.1' });console.log(`[°] Local WebSocket server running at ws://localhost:${LOCAL_PORT}`);localWss.on('connection', (localSocket) => {  console.log('[>] Local client connected');  localClients.add(localSocket);  // Local → Remote  localSocket.on('message', (msg) => {    if (DEBUG) {      console.log(`[LOCAL → REMOTE]`);    }    if (remoteSocket && remoteSocket.readyState === WebSocket.OPEN) {      remoteSocket.send(msg);    }  });  localSocket.on('close', () => {    console.log('[<] Local client disconnected');    localClients.delete(localSocket);  });});